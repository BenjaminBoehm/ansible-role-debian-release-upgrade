---
# Force fact gathering, so we have fresh information on OS versions/identifiers
- name: Gather fresh OS information
  ansible.builtin.setup:

- name: Set os release facts
  ansible.builtin.set_fact:
    current_release_version: "{{ ansible_distribution_major_version }}"
    current_release_name: "{{ releases[ansible_distribution_major_version | int] }}"
    next_release_version: "{{ ansible_distribution_major_version | int + 1 }}"
    next_release_name: "{{ releases[ansible_distribution_major_version | int + 1] }}"

# We need to set this explicitly/manually, because the host might have started out
# as debian 8/9, and the interpreter was only set at the beginning (to /usr/bin/python),
# which may not be there anymore on newer versions.
- name: Force python3 as interpreter on Debian 9 or higher
  ansible.builtin.set_fact:
    ansible_python_interpreter: /usr/bin/python3
  when: ansible_distribution_major_version|int > 9

- name: Ensure all packages are upgraded (step 1)
  ansible.builtin.apt:
    update_cache: yes
    autoremove: yes
    autoclean: yes
    upgrade: dist
    force: yes

- name: Check if reboot is needed
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot

- name: Reboot if needed
  ansible.builtin.reboot:
    search_paths: /usr/local/sbin
  when: reboot.stat.exists

- name: "Ensure sources.list uses {{ next_release_name }} repo"
  ansible.builtin.replace:
    path: /etc/apt/sources.list
    regexp: "{{ current_release_name }}"
    replace: "{{ next_release_name }}"

- name: Ensure new security repo is available (only for bullseye)
  replace:
    path: /etc/apt/sources.list
    regexp: "security.debian.org.*bullseye\/updates"
    replace: "security.debian.org/debian-security bullseye-security"
  when: next_release_name == "bullseye"

- name: "Ensure sources.list.d uses {{ next_release_name }} repo (since bookworm)"
  ansible.builtin.replace:
    path: /etc/apt/sources.list.d/debian.sources
    regexp: "{{ current_release_name }}"
    replace: "{{ next_release_name }}"
  when: current_release_version | int > 11

- name: Ensure replacing release name in additional repos
  ansible.builtin.copy:
    dest: "{{ item.key }}"
    content: "{{ item.value }}"
    mode: '0644'
  loop: "{{ additional_source_lists | dict2items }}"

- name: Ensure all packages are upgraded (step 2)
  ansible.builtin.apt:
    update_cache: yes
    autoremove: yes
    autoclean: yes
    upgrade: dist
    force: yes

- name: Gather fresh OS information
  ansible.builtin.setup:

- name: Check if reboot is needed
  ansible.builtin.stat:
    path: /var/run/reboot-required
  register: reboot

- name: Reboot if needed
  ansible.builtin.reboot:
    search_paths: /usr/local/sbin
  when: reboot.stat.exists
