---
# Force fact gathering, so we have fresh information on OS versions/identifiers
- name: Gather fresh OS information
  setup:

- set_fact:
    current_release_version: "{{ ansible_distribution_major_version }}"
    current_release_name: "{{ releases[ansible_distribution_major_version|int] }}"
    next_release_version: "{{ ansible_distribution_major_version|int+1 }}"
    next_release_name: "{{ releases[ansible_distribution_major_version|int+1] }}"

# We need to set this explicitly/manually, because the host might have started out
# as debian 8/9, and the interpreter was only set at the beginning (to /usr/bin/python),
# which may not be there anymore on newer versions.
- name: Force python3 as interpreter on Debian 9 or higher
  set_fact:
    ansible_python_interpreter: /usr/bin/python3
  when: ansible_distribution_major_version|int > 9

- name: Ensure all packages are upgraded (step 1)
  apt:
    update_cache: yes
    autoremove: yes
    autoclean: yes
    upgrade: dist
    force: yes

- name: Check if reboot is needed
  stat:
    path: /var/run/reboot-required
  register: reboot

- name: Reboot if needed
  reboot:
    search_paths: /usr/local/sbin
  when: reboot.stat.exists

# FIXME make this more robust
# Perhaps use templates for sources.list?
- name: "Ensure sources.list uses {{ next_release_name }} repo"
  replace:
    path: /etc/apt/sources.list
    regexp: "{{ current_release_name }}"
    replace: "{{ next_release_name }}"
  register: s2b

- name: Ensure new security repo is available (only for bullseye)
  replace:
    path: /etc/apt/sources.list
    regexp: "security.debian.org.*bullseye\/updates"
    replace: "security.debian.org/debian-security bullseye-security"
  when: next_release_name == "bullseye"

- name: Ensure all packages are upgraded (step 2)
  apt:
    update_cache: yes
    autoremove: yes
    autoclean: yes
    upgrade: dist
    force: yes

- name: Gather fresh OS information
  setup:

- name: Check if reboot is needed
  stat:
    path: /var/run/reboot-required
  register: reboot

- name: Reboot if needed
  reboot:
    search_paths: /usr/local/sbin
  when: reboot.stat.exists
